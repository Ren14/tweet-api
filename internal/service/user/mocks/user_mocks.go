// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/user_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/renzonaitor/tweet-api/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageRepo is a mock of StorageRepo interface.
type MockStorageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockStorageRepoMockRecorder
	isgomock struct{}
}

// MockStorageRepoMockRecorder is the mock recorder for MockStorageRepo.
type MockStorageRepoMockRecorder struct {
	mock *MockStorageRepo
}

// NewMockStorageRepo creates a new mock instance.
func NewMockStorageRepo(ctrl *gomock.Controller) *MockStorageRepo {
	mock := &MockStorageRepo{ctrl: ctrl}
	mock.recorder = &MockStorageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageRepo) EXPECT() *MockStorageRepoMockRecorder {
	return m.recorder
}

// CreateRelation mocks base method.
func (m *MockStorageRepo) CreateRelation(ctx context.Context, follow domain.FollowUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelation", ctx, follow)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRelation indicates an expected call of CreateRelation.
func (mr *MockStorageRepoMockRecorder) CreateRelation(ctx, follow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelation", reflect.TypeOf((*MockStorageRepo)(nil).CreateRelation), ctx, follow)
}

// CreateTweet mocks base method.
func (m *MockStorageRepo) CreateTweet(ctx context.Context, tweet domain.Tweet) (domain.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTweet", ctx, tweet)
	ret0, _ := ret[0].(domain.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTweet indicates an expected call of CreateTweet.
func (mr *MockStorageRepoMockRecorder) CreateTweet(ctx, tweet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTweet", reflect.TypeOf((*MockStorageRepo)(nil).CreateTweet), ctx, tweet)
}

// SelectTweetByID mocks base method.
func (m *MockStorageRepo) SelectTweetByID(ctx context.Context, tweetID string) (*domain.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTweetByID", ctx, tweetID)
	ret0, _ := ret[0].(*domain.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTweetByID indicates an expected call of SelectTweetByID.
func (mr *MockStorageRepoMockRecorder) SelectTweetByID(ctx, tweetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTweetByID", reflect.TypeOf((*MockStorageRepo)(nil).SelectTweetByID), ctx, tweetID)
}

// MockTimelineUpdater is a mock of TimelineUpdater interface.
type MockTimelineUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockTimelineUpdaterMockRecorder
	isgomock struct{}
}

// MockTimelineUpdaterMockRecorder is the mock recorder for MockTimelineUpdater.
type MockTimelineUpdaterMockRecorder struct {
	mock *MockTimelineUpdater
}

// NewMockTimelineUpdater creates a new mock instance.
func NewMockTimelineUpdater(ctrl *gomock.Controller) *MockTimelineUpdater {
	mock := &MockTimelineUpdater{ctrl: ctrl}
	mock.recorder = &MockTimelineUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimelineUpdater) EXPECT() *MockTimelineUpdaterMockRecorder {
	return m.recorder
}

// UpdateTimeline mocks base method.
func (m *MockTimelineUpdater) UpdateTimeline(ctx context.Context, tweetAuthorID, tweetID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateTimeline", ctx, tweetAuthorID, tweetID)
}

// UpdateTimeline indicates an expected call of UpdateTimeline.
func (mr *MockTimelineUpdaterMockRecorder) UpdateTimeline(ctx, tweetAuthorID, tweetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimeline", reflect.TypeOf((*MockTimelineUpdater)(nil).UpdateTimeline), ctx, tweetAuthorID, tweetID)
}
