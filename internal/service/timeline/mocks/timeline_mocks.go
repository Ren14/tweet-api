// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/timeline_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/renzonaitor/tweet-api/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageRepo is a mock of StorageRepo interface.
type MockStorageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockStorageRepoMockRecorder
	isgomock struct{}
}

// MockStorageRepoMockRecorder is the mock recorder for MockStorageRepo.
type MockStorageRepoMockRecorder struct {
	mock *MockStorageRepo
}

// NewMockStorageRepo creates a new mock instance.
func NewMockStorageRepo(ctrl *gomock.Controller) *MockStorageRepo {
	mock := &MockStorageRepo{ctrl: ctrl}
	mock.recorder = &MockStorageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageRepo) EXPECT() *MockStorageRepoMockRecorder {
	return m.recorder
}

// SelectFollowersByUserID mocks base method.
func (m *MockStorageRepo) SelectFollowersByUserID(ctx context.Context, userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFollowersByUserID", ctx, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFollowersByUserID indicates an expected call of SelectFollowersByUserID.
func (mr *MockStorageRepoMockRecorder) SelectFollowersByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFollowersByUserID", reflect.TypeOf((*MockStorageRepo)(nil).SelectFollowersByUserID), ctx, userID)
}

// SelectLastTweetsByUsersID mocks base method.
func (m *MockStorageRepo) SelectLastTweetsByUsersID(ctx context.Context, userIDs []string) ([]domain.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectLastTweetsByUsersID", ctx, userIDs)
	ret0, _ := ret[0].([]domain.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectLastTweetsByUsersID indicates an expected call of SelectLastTweetsByUsersID.
func (mr *MockStorageRepoMockRecorder) SelectLastTweetsByUsersID(ctx, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectLastTweetsByUsersID", reflect.TypeOf((*MockStorageRepo)(nil).SelectLastTweetsByUsersID), ctx, userIDs)
}

// SelectTweetsByTweetsIDs mocks base method.
func (m *MockStorageRepo) SelectTweetsByTweetsIDs(ctx context.Context, tweetIDs []string) ([]domain.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTweetsByTweetsIDs", ctx, tweetIDs)
	ret0, _ := ret[0].([]domain.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTweetsByTweetsIDs indicates an expected call of SelectTweetsByTweetsIDs.
func (mr *MockStorageRepoMockRecorder) SelectTweetsByTweetsIDs(ctx, tweetIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTweetsByTweetsIDs", reflect.TypeOf((*MockStorageRepo)(nil).SelectTweetsByTweetsIDs), ctx, tweetIDs)
}

// MockCacheRepository is a mock of CacheRepository interface.
type MockCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepositoryMockRecorder
	isgomock struct{}
}

// MockCacheRepositoryMockRecorder is the mock recorder for MockCacheRepository.
type MockCacheRepositoryMockRecorder struct {
	mock *MockCacheRepository
}

// NewMockCacheRepository creates a new mock instance.
func NewMockCacheRepository(ctrl *gomock.Controller) *MockCacheRepository {
	mock := &MockCacheRepository{ctrl: ctrl}
	mock.recorder = &MockCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepository) EXPECT() *MockCacheRepositoryMockRecorder {
	return m.recorder
}

// LPush mocks base method.
func (m *MockCacheRepository) LPush(ctx context.Context, key string, values ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LPush", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LPush indicates an expected call of LPush.
func (mr *MockCacheRepositoryMockRecorder) LPush(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPush", reflect.TypeOf((*MockCacheRepository)(nil).LPush), varargs...)
}

// LRange mocks base method.
func (m *MockCacheRepository) LRange(ctx context.Context, key string, start, stop int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRange", ctx, key, start, stop)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LRange indicates an expected call of LRange.
func (mr *MockCacheRepositoryMockRecorder) LRange(ctx, key, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRange", reflect.TypeOf((*MockCacheRepository)(nil).LRange), ctx, key, start, stop)
}

// Set mocks base method.
func (m *MockCacheRepository) Set(ctx context.Context, key string, value any, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheRepositoryMockRecorder) Set(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheRepository)(nil).Set), ctx, key, value, expiration)
}
