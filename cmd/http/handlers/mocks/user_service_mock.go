// Code generated by MockGen. DO NOT EDIT.
// Source: write_handler.go
//
// Generated by this command:
//
//	mockgen -source=write_handler.go -destination=./../mocks/user_service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/renzonaitor/tweet-api/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// FollowUser mocks base method.
func (m *MockUserService) FollowUser(ctx context.Context, followUser domain.FollowUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowUser", ctx, followUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// FollowUser indicates an expected call of FollowUser.
func (mr *MockUserServiceMockRecorder) FollowUser(ctx, followUser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowUser", reflect.TypeOf((*MockUserService)(nil).FollowUser), ctx, followUser)
}

// PublishTweet mocks base method.
func (m *MockUserService) PublishTweet(ctx context.Context, tweet domain.Tweet) (domain.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTweet", ctx, tweet)
	ret0, _ := ret[0].(domain.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishTweet indicates an expected call of PublishTweet.
func (mr *MockUserServiceMockRecorder) PublishTweet(ctx, tweet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTweet", reflect.TypeOf((*MockUserService)(nil).PublishTweet), ctx, tweet)
}
