// Code generated by MockGen. DO NOT EDIT.
// Source: reader_handler.go
//
// Generated by this command:
//
//	mockgen -source=reader_handler.go -destination=./../mocks/timeline_service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/renzonaitor/tweet-api/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTimelineService is a mock of TimelineService interface.
type MockTimelineService struct {
	ctrl     *gomock.Controller
	recorder *MockTimelineServiceMockRecorder
	isgomock struct{}
}

// MockTimelineServiceMockRecorder is the mock recorder for MockTimelineService.
type MockTimelineServiceMockRecorder struct {
	mock *MockTimelineService
}

// NewMockTimelineService creates a new mock instance.
func NewMockTimelineService(ctrl *gomock.Controller) *MockTimelineService {
	mock := &MockTimelineService{ctrl: ctrl}
	mock.recorder = &MockTimelineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimelineService) EXPECT() *MockTimelineServiceMockRecorder {
	return m.recorder
}

// GetTimeline mocks base method.
func (m *MockTimelineService) GetTimeline(ctx context.Context, userID string, limit int) ([]domain.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeline", ctx, userID, limit)
	ret0, _ := ret[0].([]domain.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeline indicates an expected call of GetTimeline.
func (mr *MockTimelineServiceMockRecorder) GetTimeline(ctx, userID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeline", reflect.TypeOf((*MockTimelineService)(nil).GetTimeline), ctx, userID, limit)
}
